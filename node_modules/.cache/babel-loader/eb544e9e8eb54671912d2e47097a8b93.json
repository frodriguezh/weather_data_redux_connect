{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frodriguez\\\\Documents\\\\react\\\\weather_data_redux_connect\\\\src\\\\containers\\\\LocationListContainer.js\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport { getWeatherCities, getCity } from '../reducers';\nimport LocationList from '../components/LocationList';\n\nclass LocationListContainer extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleSelectedLocation = city => {\n      this.props.setSelectedCity(city);\n    };\n  }\n\n  componentDidMount() {\n    const {\n      setWeather,\n      cities,\n      setSelectedCity,\n      city\n    } = this.props;\n    setWeather(cities);\n    setSelectedCity(city);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(LocationList, {\n      cities: this.props.citiesWeather,\n      onSelectedLocation: this.handleSelectedLocation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nLocationListContainer.propTypes = {\n  setSelectedCity: PropTypes.func.isRequired,\n  setWeather: PropTypes.func.isRequired,\n  cities: PropTypes.array.isRequired,\n  citiesWeather: PropTypes.array,\n  city: PropTypes.string.isRequired\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators(actions, dispatch);\n/*const mapDispatchToProps = dispatch => ({ \r\n    setCity: value => dispatch(setSelectedCity(value)),\r\n    setWeather: cities => dispatch(setWeather(cities))\r\n})*/\n\n\nconst mapStateToProps = state => ({\n  citiesWeather: getWeatherCities(state),\n  city: getCity(state)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LocationListContainer);","map":{"version":3,"sources":["C:/Users/frodriguez/Documents/react/weather_data_redux_connect/src/containers/LocationListContainer.js"],"names":["React","Component","bindActionCreators","PropTypes","connect","actions","getWeatherCities","getCity","LocationList","LocationListContainer","handleSelectedLocation","city","props","setSelectedCity","componentDidMount","setWeather","cities","render","citiesWeather","propTypes","func","isRequired","array","string","mapDispatchToProps","dispatch","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,YAAzB;AACA,SAASC,gBAAT,EAA2BC,OAA3B,QAA0C,aAA1C;AACA,OAAOC,YAAP,MAAyB,4BAAzB;;AAGA,MAAMC,qBAAN,SAAoCR,SAApC,CAA8C;AAAA;AAAA;;AAAA,SAS1CS,sBAT0C,GASjBC,IAAI,IAAI;AAE7B,WAAKC,KAAL,CAAWC,eAAX,CAA2BF,IAA3B;AACH,KAZyC;AAAA;;AAE1CG,EAAAA,iBAAiB,GAAG;AAEhB,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA,MAAd;AAAsBH,MAAAA,eAAtB;AAAuCF,MAAAA;AAAvC,QAAgD,KAAKC,KAA3D;AACAG,IAAAA,UAAU,CAACC,MAAD,CAAV;AACAH,IAAAA,eAAe,CAACF,IAAD,CAAf;AACH;;AAODM,EAAAA,MAAM,GAAG;AACL,wBACI,oBAAC,YAAD;AAAc,MAAA,MAAM,EAAE,KAAKL,KAAL,CAAWM,aAAjC;AACE,MAAA,kBAAkB,EAAE,KAAKR,sBAD3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAIH;;AAnByC;;AAsB9CD,qBAAqB,CAACU,SAAtB,GAAkC;AAC9BN,EAAAA,eAAe,EAAEV,SAAS,CAACiB,IAAV,CAAeC,UADF;AAE9BN,EAAAA,UAAU,EAAEZ,SAAS,CAACiB,IAAV,CAAeC,UAFG;AAG9BL,EAAAA,MAAM,EAAEb,SAAS,CAACmB,KAAV,CAAgBD,UAHM;AAI9BH,EAAAA,aAAa,EAAEf,SAAS,CAACmB,KAJK;AAK9BX,EAAAA,IAAI,EAAER,SAAS,CAACoB,MAAV,CAAiBF;AALO,CAAlC;;AAQA,MAAMG,kBAAkB,GAAGC,QAAQ,IAAIvB,kBAAkB,CAACG,OAAD,EAAUoB,QAAV,CAAzD;AACA;AACA;AACA;AACA;;;AAIA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAC9BT,EAAAA,aAAa,EAAEZ,gBAAgB,CAACqB,KAAD,CADD;AAE9BhB,EAAAA,IAAI,EAAEJ,OAAO,CAACoB,KAAD;AAFiB,CAAL,CAA7B;;AAKA,eAAevB,OAAO,CAACsB,eAAD,EAAkBF,kBAAlB,CAAP,CAA6Cf,qBAA7C,CAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport { bindActionCreators } from 'redux'   \r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../actions'\r\nimport { getWeatherCities, getCity } from '../reducers'\r\nimport LocationList from '../components/LocationList';\r\n\r\n\r\nclass LocationListContainer extends Component {\r\n\r\n    componentDidMount() {\r\n\r\n        const { setWeather, cities, setSelectedCity, city } = this.props\r\n        setWeather(cities)\r\n        setSelectedCity(city)\r\n    }\r\n    \r\n    handleSelectedLocation = city => {\r\n\r\n        this.props.setSelectedCity(city)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <LocationList cities={this.props.citiesWeather} \r\n              onSelectedLocation={this.handleSelectedLocation} ></LocationList>\r\n        )\r\n    }\r\n}\r\n\r\nLocationListContainer.propTypes = {\r\n    setSelectedCity: PropTypes.func.isRequired,\r\n    setWeather: PropTypes.func.isRequired,\r\n    cities: PropTypes.array.isRequired,\r\n    citiesWeather: PropTypes.array,\r\n    city: PropTypes.string.isRequired,\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators(actions, dispatch)\r\n/*const mapDispatchToProps = dispatch => ({ \r\n    setCity: value => dispatch(setSelectedCity(value)),\r\n    setWeather: cities => dispatch(setWeather(cities))\r\n})*/\r\n\r\n\r\n\r\nconst mapStateToProps = state => ({ \r\n    citiesWeather: getWeatherCities(state),\r\n    city: getCity(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LocationListContainer)"]},"metadata":{},"sourceType":"module"}