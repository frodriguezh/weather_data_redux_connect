{"ast":null,"code":"import transformForecast from '../services/transformForecast';\nimport transformWeather from '../services/transformWeather';\nexport const SET_CITY = 'SET_CITY';\nexport const SET_FORECAST_DATA = 'SET_FORECAST_DATA';\nexport const GET_WEATHER_CITY = 'GET_WEATHER_CITY';\nexport const SET_WEATHER_CITY = 'SET_WEATHER_CITY';\n\nconst setCity = payload => ({\n  type: SET_CITY,\n  payload\n});\n\nconst setForecastData = payload => ({\n  type: SET_FORECAST_DATA,\n  payload\n});\n\nconst getWeatherCity = payload => ({\n  type: GET_WEATHER_CITY,\n  payload\n});\n\nconst setWeatherCity = payload => ({\n  type: SET_WEATHER_CITY,\n  payload\n});\n\nconst api_key = \"f99bbd9e4959b513e9bd0d7f7356b38d\";\nconst url = \"http://api.openweathermap.org/data/2.5/forecast\";\nconst url_weather = \"http://api.openweathermap.org/data/2.5/weather\";\nexport const setSelectedCity = payload => {\n  return (dispatch, getState) => {\n    const url_forecast = `${url}?q=${payload}&appid=${api_key}`; //activar en el estado un indicador de busqueda de datos\n\n    dispatch(setCity(payload));\n    const state = getState();\n    const date = state.cities[payload] && state.cities[payload].forecastDataDate;\n    const now = new Date();\n\n    if (date && now - date < 1 * 60 * 1000) {\n      return;\n    }\n\n    return fetch(url_forecast).then(data => data.json()).then(weather_data => {\n      const forecastData = transformForecast(weather_data); //console.log(forecastData);\n      //modificar el estado con el resultado de la promise (fetch)\n\n      dispatch(setForecastData({\n        city: payload,\n        forecastData\n      }));\n    });\n  };\n};\nexport const setWeather = payload => {\n  return dispatch => {\n    payload.forEach(city => {\n      dispatch(getWeatherCity(city));\n      const api_weather = `${url_weather}?q=${city}&appid=${api_key}`;\n      fetch(api_weather).then(data => {\n        return data.json();\n      }).then(weather_data => {\n        const weather = transformWeather(weather_data);\n        dispatch(setWeatherCity({\n          city,\n          weather\n        }));\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/frodriguez/Documents/react/weather_data_redux_connect/src/actions/index.js"],"names":["transformForecast","transformWeather","SET_CITY","SET_FORECAST_DATA","GET_WEATHER_CITY","SET_WEATHER_CITY","setCity","payload","type","setForecastData","getWeatherCity","setWeatherCity","api_key","url","url_weather","setSelectedCity","dispatch","getState","url_forecast","state","date","cities","forecastDataDate","now","Date","fetch","then","data","json","weather_data","forecastData","city","setWeather","forEach","api_weather","weather"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AAEA,OAAO,MAAOC,QAAQ,GAAG,UAAlB;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;;AAEP,MAAMC,OAAO,GAAGC,OAAO,KAAK;AAAEC,EAAAA,IAAI,EAAEN,QAAR;AAAkBK,EAAAA;AAAlB,CAAL,CAAvB;;AACA,MAAME,eAAe,GAAGF,OAAO,KAAK;AAAEC,EAAAA,IAAI,EAAEL,iBAAR;AAA2BI,EAAAA;AAA3B,CAAL,CAA/B;;AAEA,MAAMG,cAAc,GAAGH,OAAO,KAAK;AAAEC,EAAAA,IAAI,EAAEJ,gBAAR;AAA0BG,EAAAA;AAA1B,CAAL,CAA9B;;AACA,MAAMI,cAAc,GAAGJ,OAAO,KAAK;AAAEC,EAAAA,IAAI,EAAEH,gBAAR;AAA0BE,EAAAA;AAA1B,CAAL,CAA9B;;AAEA,MAAMK,OAAO,GAAG,kCAAhB;AACA,MAAMC,GAAG,GAAG,iDAAZ;AACA,MAAMC,WAAW,GAAG,gDAApB;AAGA,OAAO,MAAMC,eAAe,GAAGR,OAAO,IAAI;AACtC,SAAO,CAACS,QAAD,EAAWC,QAAX,KAAwB;AAC3B,UAAMC,YAAY,GAAI,GAAEL,GAAI,MAAKN,OAAQ,UAASK,OAAQ,EAA1D,CAD2B,CAG3B;;AACAI,IAAAA,QAAQ,CAACV,OAAO,CAACC,OAAD,CAAR,CAAR;AAEA,UAAMY,KAAK,GAAGF,QAAQ,EAAtB;AACA,UAAMG,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAad,OAAb,KAAyBY,KAAK,CAACE,MAAN,CAAad,OAAb,EAAsBe,gBAA5D;AACA,UAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;AAEA,QAAGJ,IAAI,IAAKG,GAAG,GAAGH,IAAP,GAAe,IAAI,EAAJ,GAAS,IAAnC,EAAwC;AACpC;AACH;;AAED,WAAOK,KAAK,CAACP,YAAD,CAAL,CAAoBQ,IAApB,CACHC,IAAI,IAAKA,IAAI,CAACC,IAAL,EADN,EAELF,IAFK,CAGHG,YAAY,IAAI;AACZ,YAAMC,YAAY,GAAG9B,iBAAiB,CAAC6B,YAAD,CAAtC,CADY,CAEZ;AAEA;;AACAb,MAAAA,QAAQ,CAACP,eAAe,CAAC;AAAEsB,QAAAA,IAAI,EAAExB,OAAR;AAAiBuB,QAAAA;AAAjB,OAAD,CAAhB,CAAR;AACH,KATE,CAAP;AAYH,GA1BD;AA2BH,CA5BM;AA8BP,OAAO,MAAME,UAAU,GAAGzB,OAAO,IAAI;AAEjC,SAAOS,QAAQ,IAAI;AACfT,IAAAA,OAAO,CAAC0B,OAAR,CAAgBF,IAAI,IAAI;AAEpBf,MAAAA,QAAQ,CAACN,cAAc,CAACqB,IAAD,CAAf,CAAR;AAEA,YAAMG,WAAW,GAAI,GAAEpB,WAAY,MAAKiB,IAAK,UAASnB,OAAQ,EAA9D;AAEAa,MAAAA,KAAK,CAACS,WAAD,CAAL,CAAmBR,IAAnB,CAAyBC,IAAI,IAAI;AAC7B,eAAOA,IAAI,CAACC,IAAL,EAAP;AACH,OAFD,EAEGF,IAFH,CAESG,YAAY,IAAI;AACrB,cAAMM,OAAO,GAAGlC,gBAAgB,CAAC4B,YAAD,CAAhC;AACAb,QAAAA,QAAQ,CAACL,cAAc,CAAC;AAACoB,UAAAA,IAAD;AAAOI,UAAAA;AAAP,SAAD,CAAf,CAAR;AACH,OALD;AAOH,KAbD;AAcH,GAfD;AAgBH,CAlBM","sourcesContent":["import transformForecast from '../services/transformForecast';\r\nimport transformWeather from '../services/transformWeather';\r\n\r\nexport const  SET_CITY = 'SET_CITY'\r\nexport const SET_FORECAST_DATA = 'SET_FORECAST_DATA'\r\nexport const GET_WEATHER_CITY = 'GET_WEATHER_CITY'\r\nexport const SET_WEATHER_CITY = 'SET_WEATHER_CITY'\r\n\r\nconst setCity = payload => ({ type: SET_CITY, payload })\r\nconst setForecastData = payload => ({ type: SET_FORECAST_DATA, payload })\r\n\r\nconst getWeatherCity = payload => ({ type: GET_WEATHER_CITY, payload })\r\nconst setWeatherCity = payload => ({ type: SET_WEATHER_CITY, payload })\r\n\r\nconst api_key = \"f99bbd9e4959b513e9bd0d7f7356b38d\";\r\nconst url = \"http://api.openweathermap.org/data/2.5/forecast\";\r\nconst url_weather = \"http://api.openweathermap.org/data/2.5/weather\";\r\n\r\n\r\nexport const setSelectedCity = payload => {\r\n    return (dispatch, getState) => {\r\n        const url_forecast = `${url}?q=${payload}&appid=${api_key}`;\r\n\r\n        //activar en el estado un indicador de busqueda de datos\r\n        dispatch(setCity(payload))\r\n\r\n        const state = getState();\r\n        const date = state.cities[payload] && state.cities[payload].forecastDataDate;\r\n        const now = new Date();\r\n\r\n        if(date && (now - date) < 1 * 60 * 1000){\r\n            return;\r\n        }\r\n\r\n        return fetch(url_forecast).then(\r\n            data => (data.json())\r\n        ).then(\r\n            weather_data => {\r\n                const forecastData = transformForecast(weather_data);\r\n                //console.log(forecastData);\r\n\r\n                //modificar el estado con el resultado de la promise (fetch)\r\n                dispatch(setForecastData({ city: payload, forecastData }))\r\n            }\r\n        );\r\n\r\n    }\r\n} \r\n\r\nexport const setWeather = payload => { \r\n \r\n    return dispatch => {\r\n        payload.forEach(city => {\r\n\r\n            dispatch(getWeatherCity(city));\r\n\r\n            const api_weather = `${url_weather}?q=${city}&appid=${api_key}`;\r\n\r\n            fetch(api_weather).then( data => {\r\n                return data.json();\r\n            }).then( weather_data => {\r\n                const weather = transformWeather(weather_data);\r\n                dispatch(setWeatherCity({city, weather}));\r\n            });\r\n            \r\n        });\r\n    };\r\n};"]},"metadata":{},"sourceType":"module"}