{"ast":null,"code":"import transformForecast from '../services/transformForecast';\nimport transformWeather from '../services/transformWeather';\nexport const SET_CITY = 'SET_CITY';\nexport const SET_FORECAST_DATA = 'SET_FORECAST_DATA';\nexport const GET_WEATHER = 'GET_WEATHER_CITY';\nexport const SET_WEATHER = 'SET_WEATHER_CITY';\n\nconst setCity = payload => ({\n  type: SET_CITY,\n  payload\n});\n\nconst setForecastData = payload => ({\n  type: SET_FORECAST_DATA,\n  payload\n});\n\nconst getWeatherCity = payload => ({\n  type: GET_WEATHER_CITY,\n  payload\n});\n\nconst setWeatherCity = payload => ({\n  type: SET_WEATHER_CITY,\n  payload\n});\n\nconst api_key = \"f99bbd9e4959b513e9bd0d7f7356b38d\";\nconst url = \"http://api.openweathermap.org/data/2.5/forecast\";\nconst url_weaher = \"http://api.openweathermap.org/data/2.5/weather\";\nexport const setSelectedCity = payload => {\n  return dispatch => {\n    const url_forecast = `${url}?q=${payload}&appid=${api_key}`; //activar en el estado un indicador de busqueda de datos\n\n    dispatch(setCity(payload));\n    return fetch(url_forecast).then(data => data.json()).then(weather_data => {\n      const forecastData = transformForecast(weather_data); //console.log(forecastData);\n      //modificar el estado con el resultado de la promise (fetch)\n\n      dispatch(setForecastData({\n        city: payload,\n        forecastData\n      }));\n    });\n  };\n};\nexport const setWeather = payload => {\n  return dispatch => {\n    payload.forEach(city => {\n      const api_weather = `${url_weaher}?q=${city}&appid=${api_key}`;\n      fetch(api_weather).then(data => {\n        return data.json();\n      }).then(weather_data => {\n        const data = transformWeather(weather_data);\n        this.setState({\n          data\n        });\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/frodriguez/Documents/react/weather_data_redux_connect/src/actions/index.js"],"names":["transformForecast","transformWeather","SET_CITY","SET_FORECAST_DATA","GET_WEATHER","SET_WEATHER","setCity","payload","type","setForecastData","getWeatherCity","GET_WEATHER_CITY","setWeatherCity","SET_WEATHER_CITY","api_key","url","url_weaher","setSelectedCity","dispatch","url_forecast","fetch","then","data","json","weather_data","forecastData","city","setWeather","forEach","api_weather","setState"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AAEA,OAAO,MAAOC,QAAQ,GAAG,UAAlB;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,WAAW,GAAG,kBAApB;AACP,OAAO,MAAMC,WAAW,GAAG,kBAApB;;AAEP,MAAMC,OAAO,GAAGC,OAAO,KAAK;AAAEC,EAAAA,IAAI,EAAEN,QAAR;AAAkBK,EAAAA;AAAlB,CAAL,CAAvB;;AACA,MAAME,eAAe,GAAGF,OAAO,KAAK;AAAEC,EAAAA,IAAI,EAAEL,iBAAR;AAA2BI,EAAAA;AAA3B,CAAL,CAA/B;;AAEA,MAAMG,cAAc,GAAGH,OAAO,KAAK;AAAEC,EAAAA,IAAI,EAAEG,gBAAR;AAA0BJ,EAAAA;AAA1B,CAAL,CAA9B;;AACA,MAAMK,cAAc,GAAGL,OAAO,KAAK;AAAEC,EAAAA,IAAI,EAAEK,gBAAR;AAA0BN,EAAAA;AAA1B,CAAL,CAA9B;;AAEA,MAAMO,OAAO,GAAG,kCAAhB;AACA,MAAMC,GAAG,GAAG,iDAAZ;AACA,MAAMC,UAAU,GAAG,gDAAnB;AAGA,OAAO,MAAMC,eAAe,GAAGV,OAAO,IAAI;AACtC,SAAOW,QAAQ,IAAI;AACf,UAAMC,YAAY,GAAI,GAAEJ,GAAI,MAAKR,OAAQ,UAASO,OAAQ,EAA1D,CADe,CAGf;;AACAI,IAAAA,QAAQ,CAACZ,OAAO,CAACC,OAAD,CAAR,CAAR;AAEA,WAAOa,KAAK,CAACD,YAAD,CAAL,CAAoBE,IAApB,CACHC,IAAI,IAAKA,IAAI,CAACC,IAAL,EADN,EAELF,IAFK,CAGHG,YAAY,IAAI;AACZ,YAAMC,YAAY,GAAGzB,iBAAiB,CAACwB,YAAD,CAAtC,CADY,CAEZ;AAEA;;AACAN,MAAAA,QAAQ,CAACT,eAAe,CAAC;AAAEiB,QAAAA,IAAI,EAAEnB,OAAR;AAAiBkB,QAAAA;AAAjB,OAAD,CAAhB,CAAR;AACH,KATE,CAAP;AAYH,GAlBD;AAmBH,CApBM;AAsBP,OAAO,MAAME,UAAU,GAAGpB,OAAO,IAAI;AAEjC,SAAOW,QAAQ,IAAI;AACfX,IAAAA,OAAO,CAACqB,OAAR,CAAgBF,IAAI,IAAI;AAEpB,YAAMG,WAAW,GAAI,GAAEb,UAAW,MAAKU,IAAK,UAASZ,OAAQ,EAA7D;AACAM,MAAAA,KAAK,CAACS,WAAD,CAAL,CAAmBR,IAAnB,CAAyBC,IAAI,IAAI;AAC7B,eAAOA,IAAI,CAACC,IAAL,EAAP;AACH,OAFD,EAEGF,IAFH,CAESG,YAAY,IAAI;AACrB,cAAMF,IAAI,GAAGrB,gBAAgB,CAACuB,YAAD,CAA7B;AACA,aAAKM,QAAL,CAAc;AAAER,UAAAA;AAAF,SAAd;AACH,OALD;AAOH,KAVD;AAaH,GAdD;AAiBH,CAnBM","sourcesContent":["import transformForecast from '../services/transformForecast';\r\nimport transformWeather from '../services/transformWeather';\r\n\r\nexport const  SET_CITY = 'SET_CITY'\r\nexport const SET_FORECAST_DATA = 'SET_FORECAST_DATA'\r\nexport const GET_WEATHER = 'GET_WEATHER_CITY'\r\nexport const SET_WEATHER = 'SET_WEATHER_CITY'\r\n\r\nconst setCity = payload => ({ type: SET_CITY, payload })\r\nconst setForecastData = payload => ({ type: SET_FORECAST_DATA, payload })\r\n\r\nconst getWeatherCity = payload => ({ type: GET_WEATHER_CITY, payload })\r\nconst setWeatherCity = payload => ({ type: SET_WEATHER_CITY, payload })\r\n\r\nconst api_key = \"f99bbd9e4959b513e9bd0d7f7356b38d\";\r\nconst url = \"http://api.openweathermap.org/data/2.5/forecast\";\r\nconst url_weaher = \"http://api.openweathermap.org/data/2.5/weather\";\r\n\r\n\r\nexport const setSelectedCity = payload => {\r\n    return dispatch => {\r\n        const url_forecast = `${url}?q=${payload}&appid=${api_key}`;\r\n\r\n        //activar en el estado un indicador de busqueda de datos\r\n        dispatch(setCity(payload))\r\n\r\n        return fetch(url_forecast).then(\r\n            data => (data.json())\r\n        ).then(\r\n            weather_data => {\r\n                const forecastData = transformForecast(weather_data);\r\n                //console.log(forecastData);\r\n\r\n                //modificar el estado con el resultado de la promise (fetch)\r\n                dispatch(setForecastData({ city: payload, forecastData }))\r\n            }\r\n        );\r\n\r\n    }\r\n} \r\n\r\nexport const setWeather = payload => { \r\n \r\n    return dispatch => {\r\n        payload.forEach(city => {\r\n\r\n            const api_weather = `${url_weaher}?q=${city}&appid=${api_key}`;\r\n            fetch(api_weather).then( data => {\r\n                return data.json();\r\n            }).then( weather_data => {\r\n                const data = transformWeather(weather_data);\r\n                this.setState({ data });\r\n            });\r\n            \r\n        });\r\n        \r\n\r\n    }\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}