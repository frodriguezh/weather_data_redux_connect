{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frodriguez\\\\Documents\\\\react\\\\weather_data_redux_connect\\\\src\\\\containers\\\\LocationListContainer.js\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { setSelectedCity, setWeather } from '../actions';\nimport { getWeatherCities, getCity } from '../reducers';\nimport LocationList from '../components/LocationList';\n\nclass LocationListContainer extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleSelectedLocation = city => {\n      this.props.setCity(city);\n    };\n  }\n\n  componentDidMount() {\n    const {\n      setWeather,\n      cities,\n      setCity,\n      city\n    } = this.props;\n    setWeather(cities);\n    setCity(city);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(LocationList, {\n      cities: this.props.citiesWeather,\n      onSelectedLocation: this.handleSelectedLocation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nLocationListContainer.propTypes = {\n  setCity: PropTypes.func.isRequired,\n  cities: PropTypes.array.isRequired,\n  citiesWeather: PropTypes.array,\n  city: PropTypes.string.isRequired\n};\n/*const mapDispatchToProps = dispatch => ({ \r\n    setCity: value => dispatch(setSelectedCity(value)),\r\n    setWeather: cities => dispatch(setWeather(cities))\r\n})*/\n\nconst mapDispatchToProps = dispatch => bindActionCreators(actions, dispatch);\n\nconst mapStateToProps = state => ({\n  citiesWeather: getWeatherCities(state),\n  city: getCity(state)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LocationListContainer);","map":{"version":3,"sources":["C:/Users/frodriguez/Documents/react/weather_data_redux_connect/src/containers/LocationListContainer.js"],"names":["React","Component","bindActionCreators","PropTypes","connect","setSelectedCity","setWeather","getWeatherCities","getCity","LocationList","LocationListContainer","handleSelectedLocation","city","props","setCity","componentDidMount","cities","render","citiesWeather","propTypes","func","isRequired","array","string","mapDispatchToProps","dispatch","actions","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,EAA0BC,UAA1B,QAA6C,YAA7C;AACA,SAASC,gBAAT,EAA2BC,OAA3B,QAA0C,aAA1C;AACA,OAAOC,YAAP,MAAyB,4BAAzB;;AAGA,MAAMC,qBAAN,SAAoCT,SAApC,CAA8C;AAAA;AAAA;;AAAA,SAS1CU,sBAT0C,GASjBC,IAAI,IAAI;AAE7B,WAAKC,KAAL,CAAWC,OAAX,CAAmBF,IAAnB;AACH,KAZyC;AAAA;;AAE1CG,EAAAA,iBAAiB,GAAG;AAEhB,UAAM;AAAET,MAAAA,UAAF;AAAcU,MAAAA,MAAd;AAAsBF,MAAAA,OAAtB;AAA+BF,MAAAA;AAA/B,QAAwC,KAAKC,KAAnD;AACAP,IAAAA,UAAU,CAACU,MAAD,CAAV;AACAF,IAAAA,OAAO,CAACF,IAAD,CAAP;AACH;;AAODK,EAAAA,MAAM,GAAG;AACL,wBACI,oBAAC,YAAD;AAAc,MAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWK,aAAjC;AACE,MAAA,kBAAkB,EAAE,KAAKP,sBAD3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAIH;;AAnByC;;AAsB9CD,qBAAqB,CAACS,SAAtB,GAAkC;AAC9BL,EAAAA,OAAO,EAAEX,SAAS,CAACiB,IAAV,CAAeC,UADM;AAE9BL,EAAAA,MAAM,EAAEb,SAAS,CAACmB,KAAV,CAAgBD,UAFM;AAG9BH,EAAAA,aAAa,EAAEf,SAAS,CAACmB,KAHK;AAI9BV,EAAAA,IAAI,EAAET,SAAS,CAACoB,MAAV,CAAiBF;AAJO,CAAlC;AAOA;AACA;AACA;AACA;;AAEA,MAAMG,kBAAkB,GAAGC,QAAQ,IAAIvB,kBAAkB,CAACwB,OAAD,EAAUD,QAAV,CAAzD;;AAIA,MAAME,eAAe,GAAGC,KAAK,KAAK;AAC9BV,EAAAA,aAAa,EAAEX,gBAAgB,CAACqB,KAAD,CADD;AAE9BhB,EAAAA,IAAI,EAAEJ,OAAO,CAACoB,KAAD;AAFiB,CAAL,CAA7B;;AAKA,eAAexB,OAAO,CAACuB,eAAD,EAAkBH,kBAAlB,CAAP,CAA6Cd,qBAA7C,CAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport { bindActionCreators } from 'redux'   \r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { setSelectedCity, setWeather  } from '../actions'\r\nimport { getWeatherCities, getCity } from '../reducers'\r\nimport LocationList from '../components/LocationList';\r\n\r\n\r\nclass LocationListContainer extends Component {\r\n\r\n    componentDidMount() {\r\n\r\n        const { setWeather, cities, setCity, city } = this.props\r\n        setWeather(cities)\r\n        setCity(city)\r\n    }\r\n    \r\n    handleSelectedLocation = city => {\r\n\r\n        this.props.setCity(city)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <LocationList cities={this.props.citiesWeather} \r\n              onSelectedLocation={this.handleSelectedLocation} ></LocationList>\r\n        )\r\n    }\r\n}\r\n\r\nLocationListContainer.propTypes = {\r\n    setCity: PropTypes.func.isRequired,\r\n    cities: PropTypes.array.isRequired,\r\n    citiesWeather: PropTypes.array,\r\n    city: PropTypes.string.isRequired,\r\n}\r\n\r\n/*const mapDispatchToProps = dispatch => ({ \r\n    setCity: value => dispatch(setSelectedCity(value)),\r\n    setWeather: cities => dispatch(setWeather(cities))\r\n})*/\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators(actions, dispatch)\r\n\r\n\r\n\r\nconst mapStateToProps = state => ({ \r\n    citiesWeather: getWeatherCities(state),\r\n    city: getCity(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LocationListContainer)"]},"metadata":{},"sourceType":"module"}