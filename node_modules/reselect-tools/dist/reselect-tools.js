(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('ReselectTools', ['exports', 'reselect'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('reselect'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.Reselect);
    global.ReselectTools = mod.exports;
  }
})(this, function (exports, _reselect) {
  'use strict';

  exports.__esModule = true;
  exports.createSelectorWithDependencies = createSelectorWithDependencies;
  exports.registerSelectors = registerSelectors;
  exports.reset = reset;
  exports.checkSelector = checkSelector;
  exports.getStateWith = getStateWith;
  exports.selectorGraph = selectorGraph;

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  }

  var _registered = {};
  var _getState = null;
  var _allSelectors = new Set();

  var _isFunction = function _isFunction(func) {
    return typeof func === 'function';
  };

  function createSelectorWithDependencies() {
    for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }

    var resultFunc = funcs.pop();
    var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;
    var selector = _reselect.createSelector.apply(undefined, _toConsumableArray(dependencies).concat([resultFunc]));
    selector.dependencies = dependencies;
    _allSelectors.add(selector);
    return selector;
  }

  function registerSelectors(selectors) {
    var actuallySelectors = {};
    Object.keys(selectors).forEach(function (key) {
      var selector = selectors[key];
      if (selector.resultFunc || _isFunction(selector)) {
        actuallySelectors[key] = selector;
      }
    });
    return Object.assign(_registered, actuallySelectors);
  }

  function _unregisterSelectors() {
    Object.keys(_registered).forEach(function (key) {
      delete _registered[key];
    });
  }

  function reset() {
    _unregisterSelectors();
    _getState = null;
    _allSelectors = new Set();
  }

  function checkSelector(selector) {

    var isRegistered = false;
    if (typeof selector === 'string' && _isFunction(_registered[selector])) {
      selector = _registered[selector];
      isRegistered = true;
    }

    if (!_isFunction(selector)) {
      throw new Error('Selector ' + selector + ' is not a function...has it been registered?');
    }

    if (!isRegistered) {
      Object.keys(_registered).forEach(function (key) {
        if (_registered[key] === selector) {
          isRegistered = true;
        }
      });
    }

    var dependencies = selector.dependencies || [];
    var recomputations = selector.recomputations ? selector.recomputations() : null;

    var ret = { dependencies: dependencies, recomputations: recomputations, isRegistered: isRegistered };
    if (_getState) {
      var state = _getState();
      var inputs = dependencies.map(function (parentSelector) {
        return parentSelector(state);
      });
      var output = selector(state);
      Object.assign(ret, { inputs: inputs, output: output });
    }

    return ret;
  }

  function getStateWith(stateGetter) {
    _getState = stateGetter;
  }

  function _sumString(str) {
    return Array.from(str.toString()).reduce(function (sum, char) {
      return char.charCodeAt(0) + sum;
    }, 0);
  }

  var defaultSelectorKey = function defaultSelectorKey(selector, registry) {
    if (selector.name) {
      // if it's a vanilla function, it will have a name.
      return selector.name;
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = Object.keys(registry)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var key = _step.value;

        if (registry[key] === selector) {
          return key;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return (selector.dependencies || []).reduce(function (base, dep) {
      return base + _sumString(dep);
    }, (selector.resultFunc ? selector.resultFunc : selector).toString());
  };

  function selectorGraph() {
    var selectorKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSelectorKey;

    var graph = { nodes: {}, edges: [] };
    var addToGraph = function addToGraph(selector) {
      var name = selectorKey(selector, _registered);
      if (graph.nodes[name]) return;

      var _checkSelector = checkSelector(selector),
          recomputations = _checkSelector.recomputations,
          isRegistered = _checkSelector.isRegistered;

      graph.nodes[name] = {
        recomputations: recomputations,
        isRegistered: isRegistered,
        name: name
      };

      var dependencies = selector.dependencies || [];
      dependencies.forEach(function (dependency) {
        addToGraph(dependency);
        graph.edges.push({ from: name, to: selectorKey(dependency, _registered) });
      });
    };

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = _allSelectors[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var selector = _step2.value;

        addToGraph(selector);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return graph;
  }

  // hack for devtools
  /* istanbul ignore if */
  if (typeof window !== 'undefined') {
    window.__RESELECT_TOOLS__ = {
      selectorGraph: selectorGraph,
      checkSelector: checkSelector
    };
  }
});
